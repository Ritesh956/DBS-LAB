NOTE: Use a table Student Table(Roll_No, GPA) and populate the table with {(1, 5.8); (2, 
6.5); (3, 3.4); (4,7.8); (5, 9.5)} unless a different DB schema is explicitly specified. 

Ans:

CREATE TABLE STUDENT (
    ROLL INT PRIMARY KEY,
    GPA DECIMAL(15, 2) NOT NULL
);

INSERT INTO STUDENT (ROLL, GPA) VALUES(1,5.8);
INSERT INTO STUDENT (ROLL, GPA) VALUES(2,6.5);
INSERT INTO STUDENT (ROLL, GPA) VALUES(3,3.4);
INSERT INTO STUDENT (ROLL, GPA) VALUES(4,7.8);
INSERT INTO STUDENT (ROLL, GPA) VALUES(5,9.5);



1. Write a PL/SQL block to display the GPA of given student. 

Ans:

SET SERVEROUTPUT ON;

DECLARE
    rl STUDENT.ROLL%TYPE;
    g STUDENT.GPA%TYPE;
BEGIN
    rl := &ROLL_NUMBER;
    SELECT GPA INTO g FROM STUDENT WHERE ROLL = rl;
    DBMS_OUTPUT.PUT_LINE('GPA of ' || rl || ' is : ' || g);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No student with roll number ' || rl);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred');
END;
/


2. Write a PL/SQL block to display the letter grade(0-4: F; 4-5: E; 5-6: D; 6-7: C;                 
7-8: B; 8-9: A; 9-10: A+} of given student. 

Ans:

SET SERVEROUTPUT ON;

DECLARE
	
	rl student.roll%TYPE;
	g student.gpa%TYPE;
	grade CHAR(2);
	
BEGIN
		rl:= &roll_number;
		select gpa into g from student where roll=rl;
		IF g >=0 AND g<4 THEN 
			grade:='F';
		ELSIF g >=4 AND g<5 THEN 
			grade:='E';
		ELSIF g >=5 AND g<6 THEN 
			grade:='D';
		ELSIF g >=6 AND g<7 THEN 
			grade:='C';
		ELSIF g >=7 AND g<8 THEN 
			grade:='B';
		ELSIF g >=8 AND g<9 THEN 
			grade:='A';
		ELSE 
			grade:='A+';
		END IF;

		dbms_output.put_line('Roll number :' || rl || '     Grade: ' || grade);
		
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		dbms_output.put_line('No student with roll number '|| rl);
	WHEN OTHERS THEN
		dbms_output.put_line('Error occured');
	
END;
/


3. Input the date of issue and date of return for a book. Calculate and display the fine 
with the appropriate message using a PL/SQL block. The fine is charged as per 
the table 8.1:

Ans:

SET SERVEROUTPUT ON;

DECLARE
	
	doi date;
	dor date;
	late NUMBER;
	fine number;
	
BEGIN
	doi:= TO_DATE('&date_of_issue', 'DD-MM-YYYY');
	dor:= TO_DATE('&date_of_return', 'DD-MM-YYYY');
	late:= dor-doi;
	dbms_output.put_line('issue: ' || to_char(doi) || '  return: ' || to_char(dor) ||'  Late: ' ||late );
	IF late <= 7 THEN
		fine:=0;
	ELSIF late >= 8 and late < 16 THEN
		fine:= late*1;
	ELSIF late >= 16 and late < 30 THEN
		fine:= late*2;
	ELSE
		fine:= late*5;
	END IF;

	dbms_output.put_line('issue: ' || to_char(doi) || '  return: ' || to_char(dor) ||'  late days: ' ||late || '  Fine: ' || fine);
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		dbms_output.put_line('no data');
	WHEN OTHERS THEN
		dbms_output.put_line('Error occured');
	
END;
/


4. Write a PL/SQL block to print the letter grade of all the students(RollNo: 1 - 5).

Ans:

SET SERVEROUTPUT ON;

DECLARE
    rl STUDENT.ROLL%TYPE;
    g STUDENT.GPA%TYPE;
    grade CHAR(2);
BEGIN
    FOR i IN (SELECT ROLL, GPA FROM STUDENT) LOOP
        rl := i.ROLL;
        g := i.GPA;
        
        IF g >= 0 AND g < 4 THEN
            grade := 'F';
        ELSIF g >= 4 AND g < 5 THEN
            grade := 'E';
        ELSIF g >= 5 AND g < 6 THEN
            grade := 'D';
        ELSIF g >= 6 AND g < 7 THEN
            grade := 'C';
        ELSIF g >= 7 AND g < 8 THEN
            grade := 'B';
        ELSIF g >= 8 AND g < 9 THEN
            grade := 'A';
        ELSE
            grade := 'A+';
        END IF;

        DBMS_OUTPUT.PUT_LINE('Roll number :' || rl || '     GPA: ' || g || '     Grade: ' || grade);
    END LOOP;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No student with roll number ' || rl);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error occurred');
END;
/


5. Alter StudentTable by appending an additional column LetterGrade Varchar2(2). 
Then write a PL/SQL block  to update the table with letter grade of each student. 

Ans:

ALTER TABLE STUDENT
ADD LetterGrade VARCHAR2(2);

SET SERVEROUTPUT ON;

DECLARE
    gp STUDENT.GPA%TYPE;   
    gr STUDENT.LetterGrade%TYPE; 
BEGIN

    FOR i IN (SELECT ROLL, GPA FROM STUDENT) 
    LOOP
        gp := i.GPA;

        IF gp >= 9 THEN
            gr := 'A';
        ELSIF gp >= 7 THEN
            gr := 'B';
        ELSIF gp >= 5 THEN
            gr := 'C';
        ELSE
            gr := 'D';
        END IF;

        UPDATE STUDENT
        SET LetterGrade = gr
        WHERE ROLL = i.ROLL;
    END LOOP;

    -- COMMIT;  -- Uncomment this line if you want to commit the changes to the database
    DBMS_OUTPUT.PUT_LINE('Letter grades updated successfully.');
END;
/


6. Write a PL/SQL block to find the student with max. GPA without using aggregate 
function.

Ans:
SET SERVEROUTPUT ON;

DECLARE
    mx STUDENT.GPA%TYPE := 0;  
    rl STUDENT.ROLL%TYPE;      
    gp STUDENT.GPA%TYPE;       
BEGIN
    FOR i IN (SELECT ROLL, GPA FROM STUDENT) LOOP
        gp := i.GPA;
        IF gp > mx THEN
            mx := gp;
            rl := i.ROLL;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('Student with RollNo ' || rl || ' has the maximum GPA of ' || mx);
END;
/


7. Implement lab exercise 4 using GOTO.

Ans:

SET SERVEROUTPUT ON;

DECLARE
    GPA STUDENT.GPA%TYPE;
    GRD CHAR(2);
    RNO STUDENT.ROLL%TYPE := 1;
BEGIN
    LOOP
        IF RNO > 5 THEN
            EXIT;
        END IF;

        BEGIN
            SELECT GPA INTO GPA FROM STUDENT WHERE ROLL = RNO;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No student found for RollNo ' || RNO);
                RNO := RNO + 1;
                CONTINUE;
        END;

        IF GPA >= 9 THEN
            GRD := 'A+';
        ELSIF GPA >= 8 THEN
            GRD := 'A';
        ELSIF GPA >= 7 THEN
            GRD := 'B';
        ELSIF GPA >= 6 THEN
            GRD := 'C';
        ELSIF GPA >= 5 THEN
            GRD := 'D';
        ELSIF GPA >= 4 THEN
            GRD := 'E';
        ELSE
            GRD := 'F';
        END IF;

        DBMS_OUTPUT.PUT_LINE('RollNo: ' || RNO || ' - GPA: ' || GPA || ' - Grade: ' || GRD);

        RNO := RNO + 1;

    END LOOP;

    DBMS_OUTPUT.PUT_LINE('End of grade printing.');
END;
/


8. Based on the University database schema, write a PL/SQL block to display the 
details of the Instructor whose name is supplied by the user. Use exceptions to 
show appropriate error message for the following cases: 
a. Multiple instructors with the same name 
b. No instructor for the given name

Ans:

DECLARE
  -- Declare variables to hold the instructor details
  v_id        instructor.id%TYPE;
  v_name      instructor.name%TYPE;
  v_dept_name instructor.dept_name%TYPE;
  v_salary    instructor.salary%TYPE;
  v_count     NUMBER;  -- Variable to store the count of instructors with the same name
  
  -- Exception declarations
  e_multiple_instructors EXCEPTION;
  e_no_instructor EXCEPTION;

BEGIN

  SELECT name, id, dept_name, salary
  INTO v_name, v_id, v_dept_name, v_salary
  FROM instructor
  WHERE name = '&instructor_name';  -- Prompt for instructor name

  -- Check for multiple instructors with the same name
  SELECT COUNT(*) INTO v_count
  FROM instructor
  WHERE name = v_name;

  IF v_count > 1 THEN
    RAISE e_multiple_instructors;
  END IF;

  -- Display the details of the instructor
  DBMS_OUTPUT.PUT_LINE('Instructor ID: ' || v_id);
  DBMS_OUTPUT.PUT_LINE('Name: ' || v_name);
  DBMS_OUTPUT.PUT_LINE('Department: ' || v_dept_name);
  DBMS_OUTPUT.PUT_LINE('Salary: ' || v_salary);
  
EXCEPTION
  -- Handle the case where no instructor with the given name is found
  WHEN NO_DATA_FOUND THEN
    RAISE e_no_instructor;
    
  -- Handle the case of multiple instructors with the same name
  WHEN e_multiple_instructors THEN
    DBMS_OUTPUT.PUT_LINE('Error: Multiple instructors found with the name ' || v_name);

  -- Handle the case where no instructor with the name is found
  WHEN e_no_instructor THEN
    DBMS_OUTPUT.PUT_LINE('Error: No instructor found with the name ' || '&instructor_name');

  -- Handle any other unexpected errors
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

